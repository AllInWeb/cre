<?php
/**
 * Меню личных кабинетов
 * @return array
 */
function awards_menu()
{
    $items = array();
    $items['user/juri'] = array(
        'title'           => 'Личный кабинет жюри',
        'page callback'   => 'awards_juri_page_callback',
        'access callback' => true,
        'menu_name'       => 'main-menu',
    );
    $items['user/retailer'] = array(
        'title'           => 'Личный кабинет ритейлера',
        'page callback'   => 'awards_retailer_page_callback',
        'access callback' => true,
        'menu_name'       => 'main-menu',
    );

    return $items;
}

/**
 * Страница котурую увидит пользователя перейдя по ссылке 'Личный кабинет жюри'
 * @return string
 */
function awards_juri_page_callback()
{
    global $user;
    if ($user->uid) {
        if ((isset($user->roles[4]) && $user->roles[4])) {
            return theme('retailer_page');
        } else if ($user->uid == 1) {
            drupal_goto('<front>');
        } else {
            drupal_goto('user/retailer');
        }
    } else {
        $form_login = drupal_get_form("user_login");
        $form_register = drupal_get_form("user_register_form");
        $form_register['user_role']['#value'] = 'juri';

        return theme('retailer_page', array(
                'form_register' => $form_register,
                'form_login'    => $form_login,
            )
        );
    }
}

/**
 * Страница котурую увидит пользователя перейдя по ссылке 'Личный кабинет ритейлера'
 * @return string
 */
function awards_retailer_page_callback()
{
    global $user;
    if ($user->uid) {
        if ((isset($user->roles[5]) && $user->roles[5])) {
            $user = user_load($user->uid);
            module_load_include('inc', 'user', 'user.pages');
            $form_edit = drupal_get_form('user_profile_form', $user);

            return theme('retailer_page', array('form_edit' => $form_edit));
        } else if ($user->uid == 1) {
            drupal_goto('<front>');
        } else {
            drupal_goto('user/juri');
        }
    } else {
        $form_login = drupal_get_form("user_login");
        $form_register = drupal_get_form("user_register_form");
        $form_register['user_role']['#value'] = 'retailer';

        return theme('retailer_page', array(
                'form_register' => $form_register,
                'form_login'    => $form_login,
            )
        );
    }
}

/**
 * Переопределение темы форм регистрации
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function awards_theme($existing, $type, $theme, $path)
{
    return array(
        'retailer_page' => array(
            'render element' => 'elements',
            'template'       => 'retailer-register-page',
        )
    );
}

/**
 * Вывод форм и показ полей в зависимости от типа пользователя
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function awards_form_alter(&$form, &$form_state, $form_id)
{
    krumo($form);
    $fields = array('field_voting2', 'field_token_com', 'field_log_url');
    setFieldAccess($form, $fields);
    if ('user_register_form' == $form_id) {
        if (isset($_GET['q'])) {
            if ($_GET['q'] == 'user/retailer') {
                $form['field_clean_pass']['#access']        = false;
                $form['#validate'][]   = 'awardsRegistrationSubmit';
                $form['account']['roles'][5] = array('#type' => 'checkbox', '#title' => 'Ритейлер', '#default_value' => true, '#disabled' => true);
                $form['field_log_url']['und'][0]['value']['#default_value'] = $GLOBALS['base_url'] . '/user/retailer';
                $form['field_token_com']['und'][0]['value']['#default_value'] = 'название сети';
                retailerRules($form);
            } else if ($_GET['q'] == 'user/juri') {
                $form['field_clean_pass']['#access']        = false;
                $form['#validate'][]   = 'awardsRegistrationSubmit';
                $form['account']['roles'][4] = array('#type' => 'checkbox', '#title' => 'Жюри', '#default_value' => true, '#disabled' => true);
                $form['field_log_url']['und'][0]['value']['#default_value'] = $GLOBALS['base_url'] . '/user/juri';
                $form['field_token_com']['und'][0]['value']['#default_value'] = 'компания';
                juriRules($form);
            } else if ($_GET['q'] == 'admin/people/create') {
                $generatePass = autoGeneratePassword();
                $form['field_token_com']['und'][0]['value']['#default_value'] = 'компания';
                $form['account']['pass'] = array(
                    '#type' => 'password',
                    '#title' => t('Password'),
                    '#description' => t('Пароль згенерирован, но вы можете назначить его вручную'),
                    '#attributes' => array('value' => $generatePass),
                );
                $form['field_clean_pass']['#access']        = false;
//                $form['field_clean_pass']['und'][0]['value']['#default_value'] = $form['account']['pass']['#attributes']['value'];
                $form['field_log_url']['und'][0]['value']['#default_value'] = $GLOBALS['base_url'] . '/user/juri';
                $form['account']['name']['#default_value'] = 'user' . mt_rand(1, 10000) . 'CRE' . mt_rand(1, 800);
                $form['account']['status']['#access']        = false;
                $form['account']['roles']['#default_value']  = array(4);
                $form['account']['roles']['#access']         = false;
                $form['account']['notify']['#access']        = false;
                $form['account']['notify']['#default_value'] = 1;
                juriRules($form);
            }
        }

    } else if ('user_profile_form' == $form_id) {
        global $user;
        if (isset($user->roles[5]) && $user->roles[5]) {
            if (isset($_GET['q'])) {
                if ($_GET['q'] !== 'user/retailer') {
                    drupal_goto('user/retailer');
                }
            }
            retailerRules($form);
        } else if (isset($user->roles[4]) && $user->roles[4]) {
            if (isset($_GET['q'])) {
                if ($_GET['q'] !== 'user/juri') {
                    if ($_GET['q'] == 'node/26') {
                        $form['field_fio']['#access'] = false;
                        juriRules($form);
                        disableJuriFields($form);
                    } elseif ($_GET['q'] == 'node/27') {
                        disableVotingFields($form);
                        juriRules($form);
                    }
                }
            }
        } else if (user_access('administer')) {
            $form['field_fio']['#access'] = false;
            retailerRules($form);
            juriRules($form);
        }
    } else if ('views_form_send_news_page' == $form_id) {
        $fields = array('from', 'additional', 'views_send_direct', 'views_send_carbon_copy', 'views_send_remember', 'to');
        setFieldAccess($form, $fields);
        $form['mail']['token']['#access'] = false;
        $form['to']['views_send_to_mail']['#default_value'] = 'users_mail_pos_2';
    } else if ('vote_node_form' == $form_id) {
        $form['actions']['submit']['#submit'][] = '_awards_node_form_submit';
        $form['field_hypermarket_1']['und']['#prefix'] = '<div class="hide-lebel"><h3>Гипермаркет</h3><span class="form-required" title="Это поле обязательно для заполнения.">*</span><div class="field-shop-1-add-more-wrapper">';
        $form['field_elektronika_1']['und']['#prefix'] = '<h3>Электроника и бытовая техника</h3><span class="form-required" title="Это поле обязательно для заполнения.">*</span><div class="field-shop-1-add-more-wrapper">';
        $form['field_clothing_1']['und']['#prefix'] = '<h3>Одежда и обувь</h3><span class="form-required" title="Это поле обязательно для заполнения.">*</span><div class="field-shop-1-add-more-wrapper">';
        $form['field_remont_1']['und']['#prefix'] = '<h3>Дом и ремонт</h3><span class="form-required" title="Это поле обязательно для заполнения.">*</span><div class="field-shop-1-add-more-wrapper">';
        $form['field_parent_1']['und']['#prefix'] = '<h3>Дети и родители</h3><span class="form-required" title="Это поле обязательно для заполнения.">*</span><div class="field-shop-1-add-more-wrapper">';
        $form['field_rus_set_1']['und']['#prefix'] = '<h3>Самая ожидаемая в России сеть</h3><span class="form-required" title="Это поле обязательно для заполнения.">*</span><div class="field-shop-1-add-more-wrapper">';
        $form['field_rus_set_3']['und']['#suffix'] = '</div>';
    }
}


function awards_user_presave(&$edit, $account, $category) {
//    var_dump($edit);
    dsm($edit);
    dsm($account);
    // Make sure that our form value 'mymodule_foo' is stored as
    // 'mymodule_bar' in the 'data' (serialized) column.
    if (isset($account->pass)) {
        $edit['field_clean_pass']['und'][0]['value'] = $account->pass;
    }
}

/**
 * Запись пароля в отдельное поле при регистрации пользователя
 * @param $form
 * @param $form_state
 */
function awardsRegistrationSubmit($form, &$form_state) {
    form_set_value($form['field_clean_pass'],
        array('und' => array(0 => array('value' => $form['account']['pass']['pass1']['#value']))),
        $form_state);
}

/**
 * @param $form
 * @param $form_state
 */
function _awards_node_form_submit($form, &$form_state)
{
    module_load_include('inc', 'node', 'node.pages');
    if ($_GET['q'] == 'node/25') {
        $form_state['redirect'] = array('node/26');
    } else if ($_GET['q'] == 'add_tc') {
        $form_state['redirect'] = array($_GET['q']);
    }
}

/**
 * Правила для полей форм для роли 'Жюри'
 * @param $form
 * @return mixed
 */
function juriRules(&$form)
{
    $fields = array('field_log_url', 'field_name', 'field_logotipe', 'field_short_decr', 'field_year_stand_network', 'field_audience', 'field_shop_points', 'field_shop_point_1_2014',
        'field_shop_points_13_14', 'field_profit_dynamic', 'field_field_name_en_', 'field_field_short_decr_en_', 'field_field_audience_en_', 'field_field_shop_points_en_',
    );
    setFieldAccess($form, $fields);
    $form['field_fio']['und'][0]['value']['#required']           = 1;
    $form['field_job']['und'][0]['value']['#required']           = 1;
    $form['field_company']['und'][0]['value']['#required']       = 1;
    $form['field_company']['und'][0]['value']['#required']       = 1;

    return $form;
}

/**
 * Правила для полей форм для роли 'Ритейлер'
 * @param $form
 * @return mixed
 */
function retailerRules(&$form)
{
    $form['field_fio']['und'][0]['value']['#required']  = 1;
    $form['field_name']['und'][0]['value']['#required'] = 1;
    disableJuriFields($form);
    $form['account']['mail']['#access'] = true;
    $form['account']['pass']['#access'] = true;
    disableVotingFields($form);

    return $form;
}

/**
 * Авто-генерация пароля
 * @return string
 */
function autoGeneratePassword()
{
    $letters = array('A', 'B', 'c', 'g', 'zii', 'cr', 'V', 'I');
    $limit = count($letters) - 1;
    $placeholder = $letters[mt_rand(0, $limit)];

    return 'Rx' . mt_rand(1, 1000) . 'DBn' . mt_rand(1, 800) . '' . $placeholder;
}

/**
 * Отключение полей жюри на формах голосования
 * @param $form
 * @return mixed
 */
function disableJuriFields(&$form)
{
    $form['account']['pass']['#access']         = false;
    $form['account']['mail']['#access']         = false;
    $form['account']['current_pass']['#access'] = false;
    $fields = array('field_photo', 'field_job', 'field_company', 'field_rireit',
        'field_fio_en', 'field_field_job_en_', 'field__company_en_', 'field_riteil_en_'
    );
    setFieldAccess($form, $fields);

    return $form;
}

/**
 * Отключение полей голосвания на формах редактирования профилей
 * @param $form
 * @return mixed
 */
function disableVotingFields(&$form)
{
    $fields = array('field_user_ret1', 'field_user_ret2', 'field_user_ret3');
    setFieldAccess($form, $fields);

    return $form;
}

/**
 * Установка доступа к полям
 * @param $form
 * @param array $fields
 */
function setFieldAccess(&$form, array $fields)
{
    foreach ($fields as $key => $field) {
        $form[$field]['#access'] = false;
    }
}